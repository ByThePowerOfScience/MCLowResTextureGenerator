package btpos.tools.mclowrespackgenerator;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;
import org.apache.commons.io.FileUtils;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.EventQueue;
import java.io.File;
import java.math.BigInteger;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

public class ArgHandler {
	private final boolean isHeadless;
	
	public ArgHandler(boolean isHeadless) {
		this.isHeadless = isHeadless;
	}
	
	public Args getArgs(String[] args) {
		if (isHeadless)
			return checkCliArgs(args);
		else
			return getUIArgs();
	}
	
	public Args checkCliArgs(String[] args) throws ParseException {
		Option inputFilesOption = Option.builder("i")
		                                .required()
		                                .longOpt("input")
		                                .desc("Input files to create a resource pack for. [e.g. *.jar]")
		                                .hasArgs()
		                                .type(File.class)
		                                .build();
		
		Option outputFileOption = Option.builder("o")
		                                .longOpt("output-zip")
		                                .desc("Name of the output zip or the output folder to put it in.")
		                                .hasArg()
		                                .argName("name")
		                                .type(File.class)
		                                .build();
		
		Option sizeOption = Option.builder("s")
		                          .longOpt("max-size")
		                          .desc("Maximum size (in pixels) of block and item textures. Accounts for animated textures.\n" +
				                                "If unset, downscales all textures to the minimum size required for the GPU to be able to load the texture atlas.")
		                          .hasArg()
		                          .type(Integer.class)
		                          .build();
		
		Option formatOption = Option.builder("p")
		                            .longOpt("pack-format")
		                            .desc("The pack format to use. By default, autogenerated from the latest pack format found in the input files.")
		                            .hasArg()
		                            .type(Integer.class)
		                            .build();
		
		Option maxAtlasSizeOption = Option.builder("t")
		                            .longOpt("total-size")
		                            .desc("The target size for all textures combined, in case the autoscaling doesn't go far enough and you still need them smaller.")
		                            .hasArg()
		                            .type(Long.class)
		                            .build();
		
		Options o = new Options().addOption(inputFilesOption)
		                         .addOption(outputFileOption)
		                         .addOption(sizeOption)
		                         .addOption(formatOption)
		                         .addOption(maxAtlasSizeOption);
		
		CommandLine parsed = new DefaultParser().parse(o, args);
		
		Args a = new Args(
				parsed.getParsedOptionValue(sizeOption, (Integer) null),
				Arrays.stream(parsed.getOptionValues(inputFilesOption)).map(File::new).collect(Collectors.toList()),
				parsed.getParsedOptionValue(outputFileOption, new File("downscaled.zip"))
		);
		
		a.ext.put(Args.atlas, parsed.getParsedOptionValue(formatOption, a.ext.get(Args.atlas)));
		a.ext.put(Args.fmt, parsed.getParsedOptionValue(maxAtlasSizeOption, a.ext.get(Args.fmt)));
		
		return a;
	}
	
	public Args getUIArgs() {
		List<File> inputFiles = getInputFilesFromUI();
		
		File outputFile = getOutputFile();
		
		int autoscale = JOptionPane.showConfirmDialog(null, "Autoscale textures?");
		
		Integer maxScale = null;
		if (autoscale == JOptionPane.NO_OPTION) {
			maxScale = getWidth();
		} else if (autoscale == JOptionPane.CANCEL_OPTION) {
			System.exit(0);
		}
		
		return new Args(maxScale, inputFiles, outputFile);
	}
	
	public int getWidth() {
		String[] options = new String[] {"32", "64", "128", "256", "512", "1024", "2048"};
		int scaleIdx = JOptionPane.showOptionDialog(
				null,
				"Select maximum block/item texture size:",
				"Set Scale",
				JOptionPane.DEFAULT_OPTION,
				JOptionPane.PLAIN_MESSAGE,
				null,
				options,
				"512"
		);
		return Integer.parseInt(options[scaleIdx]);
	}
	
	public List<File> getInputFilesFromUI() {
		final JFileChooser chooser = new JFileChooser();
		chooser.setCurrentDirectory(new File(getWorkingDirIfNotSystem32()));
		chooser.setDialogTitle("Select input files:");
		chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
		chooser.setMultiSelectionEnabled(true);
		chooser.setFileFilter(new FileNameExtensionFilter("Mod/Pack (.zip, .jar)", "zip", "jar"));
		System.out.println("Requesting input files");
		EventQueue.invokeAndWait(() -> {
			int result = chooser.showOpenDialog(null);
			if (result != JFileChooser.APPROVE_OPTION) {
				System.exit(0);
			}
			System.out.println("Got input files");
		});
		return Arrays.asList(chooser.getSelectedFiles());
	}
	
	public File getOutputFile() {
		final JFileChooser chooser = new JFileChooser();
		chooser.setCurrentDirectory(new File(getWorkingDirIfNotSystem32()));
		chooser.setDialogTitle("Save output as:");
		chooser.setDialogType(JFileChooser.SAVE_DIALOG);
		chooser.setFileFilter(new FileNameExtensionFilter("Resource Pack (.zip)", "zip"));
		chooser.setSelectedFile(new File("downscaled.zip"));
		EventQueue.invokeAndWait(() -> {
			int result = chooser.showSaveDialog(null);
			if (result != JFileChooser.APPROVE_OPTION) {
				System.exit(0);
			}
		});
		return chooser.getSelectedFile();
	}
	
	private static String getWorkingDirIfNotSystem32() {
		String pwd = System.getProperty("user.dir");
		if (pwd.toLowerCase().contains("system32"))
			return FileUtils.getUserDirectory().getAbsolutePath();
		
		return pwd;
	}
}